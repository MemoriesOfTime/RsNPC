package com.smallaswater.npc;

import cn.nukkit.Server;
import cn.nukkit.entity.Entity;
import cn.nukkit.entity.data.Skin;
import cn.nukkit.level.Level;
import cn.nukkit.plugin.PluginBase;
import cn.nukkit.utils.Config;
import cn.nukkit.utils.SerializedImage;
import com.smallaswater.npc.command.RsNPCCommand;
import com.smallaswater.npc.data.RsNpcConfig;
import com.smallaswater.npc.dialog.DialogManager;
import com.smallaswater.npc.entitys.EntityRsNPC;
import com.smallaswater.npc.tasks.CheckNpcEntityTask;
import com.smallaswater.npc.utils.Utils;
import com.smallaswater.npc.utils.update.ConfigUpdateUtils;
import com.smallaswater.npc.variable.VariableManage;
import lombok.Getter;

import javax.imageio.ImageIO;
import java.io.File;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;


public class RsNPC extends PluginBase {

    public static final ThreadPoolExecutor THREAD_POOL_EXECUTOR = new ThreadPoolExecutor(
            Runtime.getRuntime().availableProcessors(),
            Runtime.getRuntime().availableProcessors() * 2,
            5,
            TimeUnit.SECONDS,
            new ArrayBlockingQueue<>(Runtime.getRuntime().availableProcessors() * 4),
            new ThreadPoolExecutor.DiscardPolicy());
    public static final Random RANDOM = new Random();

    private static RsNPC rsNPC;

    @Getter
    private final HashMap<String, Skin> skins = new HashMap<>();
    @Getter
    private final HashMap<String, RsNpcConfig> npcs = new HashMap<>();

    @Getter
    private DialogManager dialogManager;

    private static final Skin DEFAULT_SKIN;

    public static final String MINIMUM_GAME_CORE_VERSION = "1.6.0";
    public static final String MINIMUM_GAME_CORE_VERSION_PM1E = "1.6.0.0-PM1E";
    public static final String GAME_CORE_URL = "https://repo1.maven.org/maven2/cn/lanink/MemoriesOfTime-GameCore/" + MINIMUM_GAME_CORE_VERSION + "/MemoriesOfTime-GameCore-" + MINIMUM_GAME_CORE_VERSION + ".jar";
    public static final String GAME_CORE_URL_PM1E = "https://repo1.maven.org/maven2/cn/lanink/MemoriesOfTime-GameCore/" + MINIMUM_GAME_CORE_VERSION + "/MemoriesOfTime-GameCore-" + MINIMUM_GAME_CORE_VERSION_PM1E + ".jar";

    static {
        Skin skin = new Skin();
        skin.setTrusted(true);
        skin.setSkinId("Standard_Custom");
        skin.setSkinData(Base64.getDecoder().decode(""));
        DEFAULT_SKIN = skin;
    }

    public static RsNPC getInstance() {
        return rsNPC;
    }

    @Override
    public void onLoad() {
        rsNPC = this;

        ConfigUpdateUtils.updateConfig(this);

        VariableManage.addVariable("%npcName%", (player, rsNpcConfig) -> rsNpcConfig.getName());
        VariableManage.addVariable("@p", (player, rsNpcConfig) -> player.getName());

        File skinFile = new File(getDataFolder() + "/Skins");
        if (!skinFile.exists() && !skinFile.mkdirs()) {
            this.getLogger().error("Skins文件夹创建失败");
        }
        File npcFile = new File(getDataFolder() + "/Npcs");
        if (!npcFile.exists() && !npcFile.mkdirs()) {
            this.getLogger().error("Npcs文件夹创建失败");
        }

        this.saveResource("Dialog/demo.yml", false);
    }

    @Override
    public void onEnable() {
        this.getLogger().info("RsNPC开始加载");

        switch (Utils.checkAndDownloadDepend()) {
            case 1:
                Server.getInstance().getPluginManager().disablePlugin(this);
                return;
            case 2:
                this.getServer().getScheduler().scheduleTask(this, () ->
                        this.getLogger().warning("MemoriesOfTime-GameCore依赖下载完成！强烈建议重启服务器以保证正确加载！")
                );
                break;
        }

        Entity.registerEntity("EntityRsNpc", EntityRsNPC.class);

        this.getLogger().info("开始加载对话页面数据");
        this.dialogManager = new DialogManager(this);

        this.getLogger().info("开始加载皮肤");
        this.loadSkins();

        this.getLogger().info("开始加载NPC");
        this.loadNpcs();

        this.getServer().getPluginManager().registerEvents(new OnListener(this), this);
        
        this.getServer().getScheduler().scheduleRepeatingTask(this, new CheckNpcEntityTask(this), 60);

        this.getServer().getCommandMap().register("RsNPC", new RsNPCCommand("RsNPC"));
        
        this.getLogger().info("RsNPC加载完成");
    }

    @Override
    public void onDisable() {
        for (RsNpcConfig config : this.npcs.values()) {
            if (config.getEntityRsNpc() != null) {
                config.getEntityRsNpc().close();
            }
        }
        this.npcs.clear();
        this.getLogger().info("RsNPC卸载完成");
    }

    private void loadNpcs() {
        File[] files = (new File(getDataFolder() + "/Npcs")).listFiles();
        if (files != null && files.length > 0) {
            for (File file : files) {
                if (!file.isFile() && file.getName().endsWith(".yml")) {
                    continue;
                }
                String npcName = file.getName().split("\\.")[0];
                RsNpcConfig rsNpcConfig;
                try {
                    rsNpcConfig = new RsNpcConfig(npcName, new Config(file, Config.YAML));
                } catch (Exception e) {
                    this.getLogger().error("加载NPC出现错误！", e);
                    continue;
                }
                this.npcs.put(npcName, rsNpcConfig);
                rsNpcConfig.checkEntity();
                this.getLogger().info("NPC: " + rsNpcConfig.getName() + " 加载完成！");
            }
        }
    }

    private void loadSkins() {
        File[] files = new File(this.getDataFolder() + "/Skins").listFiles();
        if (files == null || files.length == 0) {
            return;
        }
        for (File file : files) {
            String skinName = file.getName();

            File skinDataFile = null;
            if (file.isFile() && skinName.endsWith(".png")) {
                skinName = skinName.replace(".png", "");
                skinDataFile = file;
            }else if (file.isDirectory()) {
                skinDataFile = new File(this.getDataFolder() + "/Skins/" + skinName + "/skin.png");
            }

            if (skinDataFile != null && skinDataFile.exists()) {
                Skin skin = new Skin();

                skin.setSkinId(skinName);

                try {
                    skin.setSkinData(ImageIO.read(skinDataFile));
                    SerializedImage.fromLegacy(skin.getSkinData().data); //检查非空和图片大小
                } catch (Exception e) {
                    this.getLogger().error("皮肤 " + skinName + " 读取错误，请检查图片格式或图片尺寸！", e);
                    continue;
                }

                //如果是4D皮肤
                try {
                    File skinJsonFile = null;
                    if (file.isFile()) {
                        skinJsonFile = new File(this.getDataFolder() + "/Skins/" + skinName + ".json");
                    }else if (file.isDirectory()) {
                        skinJsonFile = new File(this.getDataFolder() + "/Skins/" + skinName + "/skin.json");
                    }
                    if (skinJsonFile != null && skinJsonFile.exists()) {
                        Map<String, Object> skinJson = (new Config(this.getDataFolder() + "/Skins/" + skinName + "/skin.json", Config.JSON)).getAll();
                        String geometryName = null;

                        String formatVersion = (String) skinJson.getOrDefault("format_version", "1.10.0");
                        skin.setGeometryDataEngineVersion(formatVersion); //设置皮肤版本，主流格式有1.16.0,1.12.0(Blockbench新模型),1.10.0(Blockbench Legacy模型),1.8.0
                        switch (formatVersion) {
                            case "1.16.0":
                            case "1.12.0":
                                geometryName = getGeometryName(skinJsonFile);
                                if (geometryName.equals("nullvalue")) {
                                    this.getLogger().error("RsNPC 暂不支持" + skinName + "皮肤所用格式！请等待更新！");
                                } else {
                                    skin.generateSkinId(skinName);
                                    skin.setSkinResourcePatch("{\"geometry\":{\"default\":\"" + geometryName + "\"}}");
                                    skin.setGeometryName(geometryName);
                                    skin.setGeometryData(Utils.readFile(skinJsonFile));
                                    this.getLogger().info("皮肤 " + skinName + " 读取中");
                                }
                                break;
                            default:
                                this.getLogger().warning("[" + skinJsonFile.getName() + "] 的版本格式为：" + formatVersion + "，正在尝试加载！");
                            case "1.10.0":
                            case "1.8.0":
                                for (Map.Entry<String, Object> entry : skinJson.entrySet()) {
                                    if (geometryName == null) {
                                        if (entry.getKey().startsWith("geometry")) {
                                            geometryName = entry.getKey();
                                        }
                                    } else {
                                        break;
                                    }
                                }
                                skin.generateSkinId(skinName);
                                skin.setSkinResourcePatch("{\"geometry\":{\"default\":\"" + geometryName + "\"}}");
                                skin.setGeometryName(geometryName);
                                skin.setGeometryData(Utils.readFile(skinJsonFile));
                                break;
                        }
                    }
                }catch (Exception e) {
                    this.getLogger().error("皮肤 " + skinName + " 模型加载失败，请检查模型文件！", e);
                }

                skin.setTrusted(true);

                if (skin.isValid()) {
                    this.skins.put(skinName, skin);
                    this.getLogger().info("皮肤 " + skinName + " 读取完成");
                } else {
                    this.getLogger().error("皮肤 " + skinName + " 验证失败，请检查皮肤文件完整性！");
                }
            } else {
                this.getLogger().error("皮肤 " + skinName + " 错误的名称格式，请将皮肤文件命名为 skin.png 模型文件命名为 skin.json");
            }
        }
    }

    public String getGeometryName(File file) {
        Config originGeometry = new Config(file, Config.JSON);
        if (!originGeometry.getString("format_version").equals("1.12.0") && !originGeometry.getString("format_version").equals("1.16.0")) {
            return "nullvalue";
        }
        //先读取minecraft:geometry下面的项目
        List<Map<String, Object>> geometryList = (List<Map<String, Object>>) originGeometry.get("minecraft:geometry");
        //不知道为何这里改成了数组，所以按照示例文件读取第一项
        Map<String, Object> geometryMain = geometryList.get(0);
        //获取description内的所有
        Map<String, Object> descriptions = (Map<String, Object>) geometryMain.get("description");
        return (String) descriptions.getOrDefault("identifier", "geometry.unknown"); //获取identifier
    }

    public void reload() {
        this.npcs.clear();
        for (Level level : Server.getInstance().getLevels().values()) {
            for (Entity entity : level.getEntities()) {
                if (entity instanceof EntityRsNPC) {
                    entity.close();
                }
            }
        }
        if (this.dialogManager != null) {
            this.dialogManager.loadAllDialog();
        }
        this.loadSkins();
        this.loadNpcs();
    }

    public Skin getSkinByName(String name) {
        Skin skin = this.getSkins().get(name);
        if (skin == null) {
            skin = DEFAULT_SKIN;
        }
        return skin;
    }

}
